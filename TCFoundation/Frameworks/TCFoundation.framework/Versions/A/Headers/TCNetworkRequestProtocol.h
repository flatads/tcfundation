//
//  TCNetworkRequestProtocol.h
//  TCFoundation
//
//  Created by EkoHu on 2021/3/17.
//

#import <Foundation/Foundation.h>
#import <TCUtil/TCUtil.h>

NS_ASSUME_NONNULL_BEGIN
typedef void(^TCNetworkPrograssBlock)(NSProgress* progress, id req);
typedef void(^TCNetworkSuccessBlock)(id response, id req);
typedef void(^TCNetworkFailedBlock)(NSError* _Nullable error, id req);

#pragma mark - TCHttpRequestType
typedef enum : NSUInteger
{
    TCHttpRequestType_JSON = 0,             // paramters & response should be NSDictionary
    TCHttpRequestType_XML,
    TCHttpRequestType_Image,
    TCHttpRequestType_Compound,
    TCHttpRequestType_Raw,                  // paramters & response should be NSData
} TCHttpRequestType;

#pragma mark - TCNetworkRequestDelegate

@protocol TCNetworkRequestDelegate <NSObject>
@optional

#pragma mark response
/**
 *  call when request complete and success
 */
-(void)onRequestSuccessWithResponseObject:(nullable id)responseObject sender:(nonnull id)req;

/**
 *  call when request complete and failed
 */
-(void)onRequestFailWithError:(nullable NSError*)error sender:(nonnull id)req;


#pragma mark progress
/**
 *  call when receive part of data for request
 */
-(void)onRequestReceivedDataWithProgress:(nonnull NSProgress*)progress sender:(nonnull id)req;

/**
 *  call when sent part of data for request
 */
-(void)onRequestSentDataWithProgress:(nonnull NSProgress*)progress sender:(nonnull id)req;

@end

#pragma mark - TCNetworkRequestProtocol
@protocol TCNetworkRequestProtocol <NSObject>
#pragma mark paramters
@property(nonatomic, copy,   nonnull)NSString*                     url;             // must provided
@property(nonatomic, copy,   nonnull)NSString*                     httpMethod;      // default - @"GET"
@property(nonatomic, assign, readwrite)BOOL                        isMultipartPost; // default - NO(only valid in POST method)
@property(nonatomic, strong, nullable)id                           paramters;       // request parmters(type is according ASHttpRequestType)
@property(nonatomic, weak,   nullable)id<TCNetworkRequestDelegate> delegate;        // default - nil；
@property(nonatomic, copy,   nullable)TCNetworkPrograssBlock       receiveBlock;
@property(nonatomic, copy,   nullable)TCNetworkPrograssBlock       sendBlock;
@property(nonatomic, copy,   nullable)TCNetworkFailedBlock         failedBlock;
@property(nonatomic, copy,   nullable)TCNetworkSuccessBlock        successBlock;

#pragma mark Operation
-(BOOL)send;
-(BOOL)sendWithSuccessBlock:(TCNetworkSuccessBlock)successBlock failedBlock:(TCNetworkFailedBlock)failedBlock;
-(BOOL)cancel;
+(void)cancelAllThisKindRequests;

#pragma mark Policy
// 配置请求组的策略；在各组基类的load方法中调用
+(void)configRequestPolicy;
// 动态设置Header
-(void)addHeaderField:(NSString*)field setValue:(NSString*)value;

#pragma mark connection info
/****************************************************
 * These info is provided and managed by engine
 ****************************************************/

// request sequence(generated by ASNetworkEngine), it can be used to check send sequence of each pool
@property(nonatomic, assign) NSUInteger sequence;

// request global sequence(generated by ASNetworkEngine), it can be used to check send sequence of all pool
@property(nonatomic, assign) NSUInteger globalSequence;

// real network task(manage by engine)
@property(nonatomic, strong, nullable)NSURLSessionTask* task;

@end

NS_ASSUME_NONNULL_END

